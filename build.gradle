

/*
 * Copyright (c) 2015, nwillc@gmail.com
 *
 *  Permission to use, copy, modify, and/or distribute this software for any
 *  purpose with or without fee is hereby granted, provided that the above
 *  copyright notice and this permission notice appear in all copies.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 *  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 *  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 *  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 *  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 *  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.github.rholder:gradle-one-jar:1.0.4'
    }
}

plugins {
    id "java"
    id "com.github.nwillc.vplugin" version "1.3.4"
    id "com.github.nwillc.buildinfo" version "0.1.2"
}

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile 'com.sparkjava:spark-core:2.3',
            'commons-cli:commons-cli:1.3',
            'org.tinylog:tinylog:1.2-beta-1'
    runtime 'org.tinylog:slf4j-binding:1.2-beta-1'
    testCompile 'junit:junit:4.12',
            'org.assertj:assertj-core:3.6.1',
            'com.github.nwillc:jdk_contract_tests:1.8.1',
            'org.mockito:mockito-core:2.2.26'
}

apply plugin: 'jacoco'
apply plugin: 'gradle-one-jar'

group = "com.github.nwillc"
archivesBaseName = "shields"
version = "1.3.1"
targetCompatibility = "1.8"
sourceCompatibility = "1.8"

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/Shields**'])
        })
    }
}

test {

    beforeTest { descriptor ->
        logger.lifecycle("\tRunning " + descriptor.className + "." + descriptor.name)
    }

    afterSuite { descriptor, result ->
        if (descriptor.parent == null) {
            logger.lifecycle("\tTests run: " + result.testCount
                    + ", Failures: " + result.failedTestCount
                    + ", Skipped: " + result.skippedTestCount)
        }
    }

    testLogging {
        exceptionFormat "full"
    }
}

processResources.dependsOn buildInfo

task oneJar(type: OneJar) {
    mainClass = 'com.github.nwillc.shields.Shields'
    additionalDir = file('build/resources/main')
}
